name: Backend CI

on:
  push:
    branches: [ main, staging, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, staging, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12', '3.11']
      fail-fast: false

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    defaults:
      run:
        working-directory: ./backend

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      PYTHONPATH: ${{ github.workspace }}/backend
      ENVIRONMENT: test
      SECRET_KEY: test_key_123
      LOG_LEVEL: DEBUG
      ALLOWED_ORIGINS: "http://localhost:3000"
      REDIS_URL: redis://localhost:6379/0

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          backend/requirements.txt
          backend/requirements-dev.txt

    - name: Cache pre-commit
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install safety

    - name: Check dependencies for known vulnerabilities
      run: safety check

    - name: Run pre-commit hooks
      run: |
        pip install pre-commit
        pre-commit install
        pre-commit run --all-files || true

    - name: Run linting
      run: |
        black --check --line-length=100 .
        isort --check-only --profile black --line-length=100 .
        mypy . --ignore-missing-imports
      if: always()

    - name: Run tests with coverage
      run: |
        pytest --cov=app --cov-report=xml --cov-report=term-missing -v --durations=10 tests/ --ignore=tests/integration
      env:
        PYTHONPATH: ${{ github.workspace }}/backend
      timeout-minutes: 10
      if: always()

    - name: Run integration tests
      run: |
        pytest --cov=app --cov-report=xml --cov-report=term-missing -v tests/integration
      env:
        PYTHONPATH: ${{ github.workspace }}/backend
      timeout-minutes: 5
      if: always()

    - name: Generate coverage report
      run: |
        coverage combine
        coverage report
        coverage xml -i

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        fail_ci_if_error: true
        verbose: true
